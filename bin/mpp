#!/usr/bin/env python3

import logging
import os
import sys
from mpp.config import read_config
import mpp.manager
import mpp.podcast
import mpp.episode

log = logging.getLogger('mpp')

def main():
    init_log()
    log.debug('START')

    try:
        config = read_config(args.config_path)
        log.debug('CONFIG: %s' % config)
    except Exception as e:
        log.exception('Failed to read config file: %s' % args.config_path)


    try:
        manager = mpp.manager.PodcastManager(config)
    except Exception as e:
        log.exception('Failed to create PodcastManager')

    try:
        manager.cmds.execute(*args.command)
    except Exception as e:
        log.exception('Uncaught exception in execute: %s' % e)

    log.debug('END')

def init_log():
    """ Initialize the log """
    global log
    fmt = '%(asctime)s %(name)s[%(process)d] %(levelname)s: %(module)s.%(funcName)s() %(message)s'
    handler = logging.StreamHandler()
    handler.setFormatter(logging.Formatter(fmt))
    log.setLevel(args.logging_level)
    log.addHandler(handler)
    mpp.manager.log = log
    mpp.podcast.log = log
    mpp.episode.log = log

def sighandler(signum, frame):
    """ Shut down gracefully """
    global sensor_manager
    log.info('sighandler() received signal %s, shutting down...' % signum)
    if sensor_manager:
        log.info('sighandler() calling shutdown() for sensor_manager')
        sensor_manager.shutdown()

if __name__ == '__main__':
    import argparse
    import signal
    
    parser = argparse.ArgumentParser(description='MPodder Python')
    parser.add_argument('--age', dest='age_days', default=None, type=int,
                        help='Sets the maximum age of podcasts in days')
    parser.add_argument('-c', '--config-file', dest='config_path',
                        default=os.environ['HOME'] + '/.mpodder/config',
                        help='Choose config file path')
    parser.add_argument('--debug', dest='logging_level', action='store_const',
                        const=logging.DEBUG, default=logging.WARN,
                        help='write debugging output in the log')
    parser.add_argument('command', metavar='N', nargs='+',
                       help='an integer for the accumulator')
    args = parser.parse_args()

    for sig in [signal.SIGHUP, signal.SIGTERM, signal.SIGUSR1,
                signal.SIGUSR2, signal.SIGQUIT, signal.SIGINT]:
        signal.signal(sig, sighandler)

    main()
