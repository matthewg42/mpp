#!/usr/bin/env python3

import logging
import os
import sys
from mpp.config import read_config
import mpp.manager
import mpp.podcast
import mpp.episode

log = logging.getLogger('mpp')

def main(args):
    init_log(args)
    log.debug('START')

    try:
        config = read_config(args.config_path)
        log.debug('CONFIG: %s' % config)
    except Exception as e:
        log.exception('Failed to read config file: %s' % args.config_path)

    try:
        manager = mpp.manager.PodcastManager(config)
    except Exception as e:
        log.exception('Failed to create PodcastManager')

    manager.exec(args)

    log.debug('END')

def init_log(args):
    """ Initialize the log """
    global log
    fmt = '%(asctime)s %(name)s[%(process)d] %(levelname)s: %(module)s.%(funcName)s() %(message)s'
    handler = logging.StreamHandler()
    handler.setFormatter(logging.Formatter(fmt))
    log.setLevel(args.logging_level)
    log.addHandler(handler)
    mpp.manager.log = log
    mpp.podcast.log = log
    mpp.episode.log = log

def sighandler(signum, frame):
    """ Shut down gracefully """
    global sensor_manager
    log.info('sighandler() received signal %s, shutting down...' % signum)
    if sensor_manager:
        log.info('sighandler() calling shutdown() for sensor_manager')
        sensor_manager.shutdown()

if __name__ == '__main__':
    import argparse
    import signal
    import sys
    
    parser = argparse.ArgumentParser(description='MPodder Python')
    parser.add_argument('-c', '--config-file', dest='config_path',
                        default=os.environ['HOME'] + '/.config/mpp/config',
                        help='Choose config file path')
    parser.add_argument('--debug', dest='logging_level', action='store_const',
                        const=logging.DEBUG, default=logging.INFO,
                        help='write debugging output in the log')
    parser.add_argument('--verbose', action='store_true', help='Verbose output')
    parser.add_argument('--assume-yes', action='store_true', help='Assume yes to confirmation prompts')
    subparsers = parser.add_subparsers()
    parser_add = subparsers.add_parser('add', help='add a podcast')
    parser_add.add_argument('url', help='The URL of a podcast feed to add')
    parser_add.add_argument('title', nargs='?', default=None, help='A title for the podcast (overrides value from feed)')
    parser_add.set_defaults(func=main, cmd='add_podcast')

    parser_list = subparsers.add_parser('list', aliases=['ls'], help='list podcast(s)')
    parser_list.add_argument('--url', action='store_true', help='List title and URL')
    parser_list.add_argument('--path', action='store_true', help='List full path of json file')
    parser_list.add_argument('filter', nargs='?', default=None, help='Filter on podcast name')
    parser_list.set_defaults(func=main, cmd='list_podcasts')

    parser_remove = subparsers.add_parser('remove', aliases=['rm'], help='remove podcast(s)')
    parser_remove.add_argument('filter', nargs='?', default=None, help='Filter on podcast name')
    parser_remove.set_defaults(func=main, cmd='remove_podcast')

    parser_catchup = subparsers.add_parser('catchup', help='catchup podcast(s)')
    parser_catchup.add_argument('--leave', type=int, default=0, help='Leave most recent episodes unlistened')
    parser_catchup.add_argument('filter', nargs='?', default=None, help='Filter on podcast name')
    parser_catchup.set_defaults(func=main, cmd='catchup_podcast')

    args = parser.parse_args()

    for sig in [signal.SIGHUP, signal.SIGTERM, signal.SIGUSR1,
                signal.SIGUSR2, signal.SIGQUIT, signal.SIGINT]:
        signal.signal(sig, sighandler)

    if 'func' not in args:
        sys.stderr.write('Try --help for usage information\n')
        exit(1)

    args.func(args)
