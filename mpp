#!/usr/bin/env python3

import os
import sys
import logging
import mpp.config
import mpp.manager
import mpp.podcast
from mpp.util import log

def main(args):
    init_log(args)
    log.debug('START')

    try:
        mpp.config.config = mpp.config.read_config(args.config_path)
        log.debug('CONFIG: %s' % mpp.config.config)
    except Exception as e:
        log.exception('Failed to read config file: %s : %s' % (args.config_path, e))
        exit(1)

    try:
        manager = mpp.manager.PodcastManager(mpp.config.config)
    except Exception as e:
        log.exception('Failed to create PodcastManager: %s' % e)
        exit(1)

    manager.exec(args)

    log.debug('END')

def init_log(args):
    """ Initialize the log """
    fmt = '%(asctime)s %(name)s[%(process)d] %(levelname)s: %(module)s.%(funcName)s() %(message)s'
    handler = logging.StreamHandler()
    handler.setFormatter(logging.Formatter(fmt))
    log.setLevel(args.logging_level)
    log.addHandler(handler)
    mpp.util.log = log

def sighandler(signum, frame):
    """ Shut down gracefully """
    global sensor_manager
    log.info('sighandler() received signal %s, shutting down...' % signum)

if __name__ == '__main__':
    import argparse
    #import signal
    import sys
    
    parser = argparse.ArgumentParser(description='MPodder Python')
    parser.add_argument('-c', '--config-file', dest='config_path',
                        default=os.environ['HOME'] + '/.config/mpp/config',
                        help='Choose config file path')
    parser.add_argument('--debug', dest='logging_level', action='store_const',
                        const=logging.DEBUG, default=logging.INFO,
                        help='write debugging output in the log')
    parser.add_argument('--class-debug', dest='logging_level', action='store_const',
                        const=logging.DEBUG-1,
                        help='write debugging output in the log including class debugging')
    parser.add_argument('--verbose', action='store_true', help='Verbose output')
    parser.add_argument('--assume-yes', action='store_true', help='Assume yes to confirmation prompts')
    subparsers = parser.add_subparsers()
    parser_add = subparsers.add_parser('add', help='add a podcast')
    parser_add.add_argument('url', help='The URL of a podcast feed to add')
    parser_add.add_argument('title', nargs='?', default=None, help='A title for the podcast (overrides value from feed)')
    parser_add.set_defaults(func=main, cmd='add_podcast')

    parser_list = subparsers.add_parser('list', aliases=['ls'], help='list podcast(s)')
    parser_list.add_argument('--url', action='store_true', help='List title and URL')
    parser_list.add_argument('--path', action='store_true', help='List full path of json file')
    parser_list.add_argument('filter', nargs='?', default=None, help='Filter on podcast name')
    parser_list.set_defaults(func=main, cmd='list_podcasts')

    parser_show = subparsers.add_parser('show', aliases=['info'], help='show podcast details')
    parser_show.add_argument('filter', nargs='?', default=None, help='Filter on podcast name')
    parser_show.set_defaults(func=main, cmd='show_podcast')

    parser_remove = subparsers.add_parser('remove', aliases=['rm'], help='remove podcast(s)')
    parser_remove.add_argument('filter', nargs='?', default=None, help='Filter on podcast name')
    parser_remove.set_defaults(func=main, cmd='remove_podcast')

    parser_rename = subparsers.add_parser('rename', aliases=['mv'], help='rename a podcast')
    parser_rename.add_argument('filter', default=None, help='Filter on podcast name - should match just one podcast')
    parser_rename.add_argument('title', nargs='+', default=None, help='The new title of the podcast')
    parser_rename.set_defaults(func=main, cmd='rename_podcast')

    parser_catchup = subparsers.add_parser('catchup', help='catchup podcast(s)')
    parser_catchup.add_argument('--leave', type=int, default=0, help='Leave most recent episodes unlistened')
    parser_catchup.add_argument('filter', nargs='?', default=None, help='Filter on podcast name')
    parser_catchup.set_defaults(func=main, cmd='catchup_podcast')

    parser_update = subparsers.add_parser('update', aliases=['up'], help='update podcast(s) feed data')
    parser_update.add_argument('--parallel', type=int, default=4, help='Number of parallel updaters (default=4)')
    parser_update.add_argument('filter', nargs='?', default=None, help='Filter on podcast name')
    parser_update.set_defaults(func=main, cmd='update_podcasts')

    parser_download = subparsers.add_parser('download', aliases=['dl'], help='download new podcast episodes')
    parser_download.add_argument('--parallel', type=int, default=4, help='Number of parallel downloaders (default=4)')
    parser_download.add_argument('--max', type=int, default=None, help='Maximum number of episodes to download (default=unlimited)')
    parser_download.add_argument('filter', nargs='?', default=None, help='Filter on podcast name')
    parser_download.set_defaults(func=main, cmd='download_podcasts')

    parser_episodes = subparsers.add_parser('episodes', aliases=['ep', 'lse'], help='list podcast episodes')
    parser_episodes.add_argument('--first', type=int, default=None, help='Show only the first [int] episodes per podcast')
    parser_episodes.add_argument('--last', type=int, default=None, help='Show only the last [int] episodes per podcast')
    parser_episodes.add_argument('--path', action='store_true', help='Only output the path of downloaded, new episodes')
    parser_episodes.add_argument('--status', type=str, nargs='*', help='Show only episodes having the specified status')
    parser_episodes.add_argument('filter', nargs='?', default=None, help='Filter on podcast name')
    parser_episodes.set_defaults(func=main, cmd='list_episodes')

    parser_renew = subparsers.add_parser('renew', aliases=['new'], help='re-new podcast episodes')
    parser_renew.add_argument('--first', type=int, default=None, help='re-new only the first [int] episodes per podcast')
    parser_renew.add_argument('--last', type=int, default=None, help='re-new only the last [int] episodes per podcast')
    parser_renew.add_argument('--status', type=str, nargs='*', help='re-new only episodes having the specified status')
    parser_renew.add_argument('--since', type=str, help='re-new only episodes published on or after a specified datetime')
    parser_renew.add_argument('filter', nargs='?', default=None, help='Filter on podcast name')
    parser_renew.set_defaults(func=main, cmd='renew_episodes')

    args = parser.parse_args()

    #for sig in [signal.SIGHUP, signal.SIGTERM, signal.SIGUSR1,
    #            signal.SIGUSR2, signal.SIGQUIT, signal.SIGINT]:
    #    signal.signal(sig, sighandler)

    if 'func' not in args:
        sys.stderr.write('Try --help for usage information\n')
        exit(1)

    args.func(args)
